{"version":3,"sources":["components/LoadButton.tsx","components/CommentList.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["LoadButton","loading","onLoadData","type","disabled","onClick","PostList","comment","key","id","name","body","email","preparedPost","post","title","user","address","city","comments","map","CommentList","App","useState","loaded","setLoaded","setLoading","setComments","posts","setPosts","users","setUsers","preparedPosts","setPreparedPosts","search","setSearch","loadData","url","a","fetch","then","response","json","data","Promise","resolve","filterPostsWithDebounce","useCallback","debounce","all","values","useEffect","newPreparedPosts","forEach","filter","postId","userId","push","preparePosts","onChange","event","target","value","includes","ReactDOM","render","document","getElementById"],"mappings":"2TAeeA,EARe,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACxC,OACE,4BAAQC,KAAK,SAASC,SAAUH,EAASI,QAASH,GAC/CD,EAAU,UAAY,SCSdK,EAZa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OACE,wBAAIC,IAAKD,EAAQE,IACdF,EAAQG,KACR,MACAH,EAAQI,KACR,MACAJ,EAAQK,QCkBAN,EAxBa,SAAC,GAAsB,IAApBO,EAAmB,EAAnBA,aAC7B,OACE,wBAAIL,IAAKK,EAAaC,KAAKL,IACxBI,EAAaC,KAAKC,MAClB,MACAF,EAAaC,KAAKH,KAClB,MACAE,EAAaG,KAAKN,KAClB,IACAG,EAAaG,KAAKJ,MAClB,IACAC,EAAaG,KAAKC,QAAQC,KAC3B,4BACGL,EAAaM,SAASC,KAAI,SAACb,GAC1B,OACE,kBAACc,EAAD,CAAab,IAAKD,EAAQE,GAAIF,QAASA,UCqFpCe,EAnGH,WAAO,IAAD,EACYC,oBAAkB,GAD9B,mBACTC,EADS,KACDC,EADC,OAEcF,oBAAkB,GAFhC,mBAETtB,EAFS,KAEAyB,EAFA,OAGgBH,mBAAoB,IAHpC,mBAGTJ,EAHS,KAGCQ,EAHD,OAIUJ,mBAAiB,IAJ3B,mBAITK,EAJS,KAIFC,EAJE,OAKUN,mBAAiB,IAL3B,mBAKTO,EALS,KAKFC,EALE,OAM0BR,mBAAyB,IANnD,mBAMTS,EANS,KAMMC,EANN,OAOYV,mBAAiB,IAP7B,mBAOTW,EAPS,KAODC,EAPC,KAaVC,EAAQ,uCAAG,WAAqBC,GAArB,eAAAC,EAAA,sEACIC,MAAMF,GAAKG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UADzC,cACTC,EADS,yBAGRC,QAAQC,QAAQF,IAHR,2CAAH,sDAgCRG,EAA0BC,sBAC9BC,IAASb,EAAW,KACpB,IAGIjC,EAAU,uCAAG,sBAAAoC,EAAA,6DACjBZ,GAAW,GADM,KAGjBkB,QAHiB,SAITR,EA7CW,gFAyCF,mCAKTA,EA7CQ,6EAwCC,oCAMTA,EA7CQ,6EAuCC,+CAGTa,IAHS,gBAQdT,MAAK,SAAAU,GACJvB,EAAY,YAAIuB,EAAO,KACvBrB,EAAS,YAAIqB,EAAO,KACpBnB,EAAS,YAAImB,EAAO,KACpBzB,GAAU,MAZG,4CAAH,qDAgBhB0B,qBAAU,YA/CW,WACnB,IAAMC,EAAmC,GAEzCxB,EAAMyB,SAAQ,SAACvC,GACb,IAAMD,EAA6B,CACjCC,KAAK,eAAMA,GACXK,SAAUA,EAASmC,QAAO,SAAC/C,GAAD,OAAsBA,EAAQgD,SAAWzC,EAAKL,MACxEO,KAAK,eAAMc,EAAMwB,QAAO,SAACtC,GAAD,OAAgBA,EAAKP,KAAOK,EAAK0C,UAAQ,KAGnEJ,EAAiBK,KAAK5C,MAGxBoB,EAAiBmB,GAmCjBM,GACAhC,GAAW,KACV,CAACF,IAMJ,OACE,oCACE,qDACA,2BAAOrB,KAAK,OAAOwD,SAPF,SAACC,GACpBd,EAAwBc,EAAMC,OAAOC,UAOlCtC,IAAWvB,EAER,4BA7CC+B,EAAcsB,QAAO,SAACzC,GAC3B,SAAIA,EAAaC,KAAKC,MAAMgD,SAAS7B,KAAWrB,EAAaC,KAAKH,KAAKoD,SAAS7B,OA6C3Dd,KAAI,SAACP,GAClB,OACE,kBAAC,EAAD,CAAUL,IAAKK,EAAaC,KAAKL,GAAII,aAAcA,QAMzD,kBAAC,EAAD,CACEZ,QAASA,EACTC,WAAYA,MChGxB8D,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b692e58f.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  loading: boolean;\n  onLoadData: () => void;\n}\n\nconst LoadButton: FC<Props> = ({ loading, onLoadData }) => {\n  return (\n    <button type=\"button\" disabled={loading} onClick={onLoadData}>\n      {loading ? 'Loading' : 'Load'}\n    </button>\n  );\n};\n\nexport default LoadButton;\n","import React, { FC } from 'react';\nimport { Comment } from './interfaces';\n\ninterface Props {\n  comment: Comment;\n}\n\nconst PostList: FC<Props> = ({ comment }) => {\n  return (\n    <li key={comment.id}>\n      {comment.name}\n      {' - '}\n      {comment.body}\n      {' - '}\n      {comment.email}\n    </li>\n  );\n};\n\nexport default PostList;\n","import React, { FC } from 'react';\nimport { PreparedPost, Comment } from './interfaces';\nimport CommentList from './CommentList';\n\ninterface Props {\n  preparedPost: PreparedPost;\n}\n\nconst PostList: FC<Props> = ({ preparedPost }) => {\n  return (\n    <li key={preparedPost.post.id}>\n      {preparedPost.post.title}\n      {' - '}\n      {preparedPost.post.body}\n      {' - '}\n      {preparedPost.user.name}\n      {' '}\n      {preparedPost.user.email}\n      {' '}\n      {preparedPost.user.address.city}\n      <ul>\n        {preparedPost.comments.map((comment: Comment) => {\n          return (\n            <CommentList key={comment.id} comment={comment} />\n          );\n        })}\n      </ul>\n\n    </li>\n  );\n};\n\nexport default PostList;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport debounce from 'lodash/debounce';\nimport LoadButton from './components/LoadButton';\nimport PostList from './components/PostList';\nimport {\n  User, Post, Comment, PreparedPost,\n} from './components/interfaces';\n\nconst App = () => {\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [preparedPosts, setPreparedPosts] = useState<PreparedPost[]>([]);\n  const [search, setSearch] = useState<string>('');\n\n  const COMMENTS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n  const POSTS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\n  const USERS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\n\n  const loadData = async <T extends {}>(url: string): Promise<T[]> => {\n    const data = await fetch(url).then(response => response.json());\n\n    return Promise.resolve(data);\n  };\n\n  const preparePosts = () => {\n    const newPreparedPosts: PreparedPost[] = [];\n\n    posts.forEach((post: Post) => {\n      const preparedPost: PreparedPost = {\n        post: { ...post },\n        comments: comments.filter((comment: Comment) => comment.postId === post.id),\n        user: { ...users.filter((user: User) => user.id === post.userId)[0] },\n      };\n\n      newPreparedPosts.push(preparedPost);\n    });\n\n    setPreparedPosts(newPreparedPosts);\n  };\n\n  const filterPosts = () => {\n    return preparedPosts.filter((preparedPost: PreparedPost) => {\n      if (preparedPost.post.title.includes(search) || preparedPost.post.body.includes(search)) {\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  const filterPostsWithDebounce = useCallback(\n    debounce(setSearch, 1000),\n    [],\n  );\n\n  const onLoadData = async () => {\n    setLoading(true);\n\n    Promise.all([\n      await loadData<Comment>(COMMENTS_URL),\n      await loadData<Post>(POSTS_URL),\n      await loadData<User>(USERS_URL),\n    ])\n      .then(values => {\n        setComments([...values[0]]);\n        setPosts([...values[1]]);\n        setUsers([...values[2]]);\n        setLoaded(true);\n      });\n  };\n\n  useEffect(() => {\n    preparePosts();\n    setLoading(false);\n  }, [loaded]);\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    filterPostsWithDebounce(event.target.value);\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <input type=\"text\" onChange={handleSearch} />\n      {loaded && !loading\n        ? (\n          <ul>\n            {filterPosts().map((preparedPost: PreparedPost) => {\n              return (\n                <PostList key={preparedPost.post.id} preparedPost={preparedPost} />\n              );\n            })}\n          </ul>\n        )\n        : (\n          <LoadButton\n            loading={loading}\n            onLoadData={onLoadData}\n          />\n        )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}